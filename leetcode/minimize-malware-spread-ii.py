class Solution:
    def minMalwareSpread(self, graph, initial) -> int:
        n = len(graph)
        g = {i: set() for i in range(n)}
        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1:
                    g[i].add(j)
                    g[j].add(i)

        def dfs(visited, node):
            visited.add(node)
            for neighbor in g[node]:
                if neighbor not in visited:
                    dfs(visited, neighbor)

        _min = n
        res = n
        for nodeDelete in initial:
            adj = g[nodeDelete]
            # delete node
            for v in adj:
                if v != nodeDelete:
                    g[v].remove(nodeDelete)
            del g[nodeDelete]

            # calculate
            infected = set()
            for v in initial:
                if v != nodeDelete and v not in infected:
                    dfs(infected, v)
            if len(infected) < _min or (len(infected) == _min and nodeDelete < res):
                _min = len(infected)
                res = nodeDelete

            # rollback graph
            for v in adj:
                if v != nodeDelete:
                    g[v].add(nodeDelete)
            g[nodeDelete] = adj

        return res


s = Solution()
print(s.minMalwareSpread([[1, 1, 0],
                          [1, 1, 0],
                          [0, 0, 1]], [0, 1]))
print(s.minMalwareSpread([[1, 1, 0],
                          [1, 1, 1],
                          [0, 1, 1]], [0, 1]))
print(s.minMalwareSpread([[1, 1, 0, 0],
                          [1, 1, 1, 0],
                          [0, 1, 1, 1],
                          [0, 0, 1, 1]], [0, 1]))
