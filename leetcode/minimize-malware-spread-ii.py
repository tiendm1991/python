class Solution:
    def minMalwareSpread(self, graph, initial) -> int:
        n = len(graph)
        g = {i: set() for i in range(n)}
        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1:
                    g[i].add(j)
                    g[j].add(i)

        def dfs(visited, u):
            visited.add(u)
            for v in g[u]:
                if v not in visited:
                    dfs(visited, v)

        _min = n
        res = n
        for u in initial:
            rollback = g[u]
            for v in rollback:
                if v != u:
                    g[v].remove(u)
            del g[u]

            visited = set()
            for v in initial:
                if v != u and v not in visited:
                    dfs(visited, v)

            if len(visited) < _min or (len(visited) == _min and u < res):
                _min = len(visited)
                res = u

            for v in rollback:
                if v != u:
                    g[v].add(u)
            g[u] = rollback

        return res


s = Solution()
print(s.minMalwareSpread([[1, 1, 0],
                          [1, 1, 0],
                          [0, 0, 1]], [0, 1]))
print(s.minMalwareSpread([[1, 1, 0],
                          [1, 1, 1],
                          [0, 1, 1]], [0, 1]))
print(s.minMalwareSpread([[1, 1, 0, 0],
                          [1, 1, 1, 0],
                          [0, 1, 1, 1],
                          [0, 0, 1, 1]], [0, 1]))
