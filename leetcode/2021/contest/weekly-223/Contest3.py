import collections


class Solution:
    def minimumHammingDistance(self, source, target, allowedSwaps) -> int:
        n = len(source)
        p = [i for i in range(n)]
        d = {}

        def find(x):
            if p[x] != x:
                p[x] = find(p[x])
            return p[x]

        def union(x, y):
            rx, ry = find(x), find(y)
            if ry < rx:
                p[rx] = ry
            else:
                p[ry] = rx

        for pair in allowedSwaps:
            union(pair[0], pair[1])

        for i in range(n):
            r = find(i)
            if r not in d:
                d[r] = [i]
            else:
                d[r].append(i)

        res = 0
        for k in d:
            s = collections.Counter([source[x] for x in d[k]])
            t = collections.Counter([target[x] for x in d[k]])
            for x in t:
                res += max(t[x] - s.get(x, 0), 0)
        return res


s = Solution()
print(s.minimumHammingDistance([1, 2, 3, 4], [2, 1, 4, 5], [[0, 1], [2, 3]]))
print(s.minimumHammingDistance([50, 46, 54, 35, 18, 42, 26, 72, 75, 47, 50, 4, 54, 21, 18, 18, 61, 64, 100, 14],
                               [83, 34, 43, 73, 61, 94, 10, 68, 74, 31, 54, 46, 28, 60, 18, 18, 4, 44, 79, 92],
                               [[1, 8], [14, 17], [3, 1], [17, 10], [18, 2], [7, 12], [11, 3], [1, 15], [13, 17],
                                [18, 19], [0, 10], [15, 19], [0, 15],
                                [6, 7], [7, 15], [19, 4], [7, 16], [14, 18], [8, 10], [17, 0], [2, 13], [14, 10],
                                [12, 17], [2, 9], [6, 15], [16, 18],
                                [2, 16], [2, 6], [4, 5], [17, 5], [10, 13], [7, 2], [9, 16], [15, 5], [0, 5], [8, 0],
                                [11, 12], [9, 7], [1, 0],
                                [11, 17], [4, 6], [5, 7], [19, 12], [3, 18], [19, 1], [13, 18], [19, 6], [13, 6],
                                [6, 1], [4, 2]]))
print(s.minimumHammingDistance([41, 37, 51, 100, 25, 33, 90, 49, 65, 87, 11, 18, 15, 18],
                               [41, 92, 69, 75, 29, 13, 53, 21, 17, 81, 33, 19, 33, 32],
                               [[0, 11], [5, 9], [6, 9], [5, 7], [8, 13], [4, 8], [12, 7], [8, 2], [13, 5], [0, 7],
                                [6, 4], [8, 9], [4, 12], [6, 1], [10, 0], [10, 2], [7, 3], [11, 10], [5, 2], [11, 1],
                                [3, 0], [8, 5], [12, 6], [2, 1], [11, 2], [4, 9], [2, 9], [10, 6], [12, 10], [4, 13],
                                [13, 2], [11, 9], [3, 6], [0, 4], [1, 10], [5, 11], [12, 1], [10, 4], [6, 2], [10, 7],
                                [3, 13], [4, 5], [13, 10], [4, 7], [0, 12], [9, 10], [9, 3], [0, 5], [1, 9], [5, 10],
                                [8, 0], [12, 11], [11, 4], [7, 9], [7, 2], [13, 9], [12, 3], [8, 6], [7, 6], [8, 12],
                                [4, 3], [7, 13], [0, 13], [2, 0], [3, 8], [8, 1], [13, 6], [1, 4], [0, 9], [2, 3],
                                [8, 7], [4, 2], [9, 12]]))
